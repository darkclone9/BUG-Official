rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - public read for leaderboard, users can write their own data, admins can update roles
    match /users/{userId} {
      allow read: if true; // Allow public read access for leaderboard
      allow write: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
        // Only allow updating role field for admin promotion/demotion
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']);
    }

    // Tournaments collection - authenticated users can read, admins can write
    match /tournaments/{tournamentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Tournament registrations - users can read/write their own registrations
    match /tournament_registrations/{registrationId} {
      allow read: if request.auth != null; // Allow reading for tournament management
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null &&
        resource.data.userId == request.auth.uid;
    }

    // User stats - public read for leaderboards and player directory, users can write their own stats
    match /user_stats/{userId} {
      allow read: if true; // Allow public read access for leaderboards and player directory
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Announcements - authenticated users can read all, unauthenticated users can read broadcast only, admins can write
    match /announcements/{announcementId} {
      allow read: if request.auth != null || resource.data.priority == 'broadcast';
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Admin users - only admins can read/write
    match /admin_users/{adminId} {
      allow read, write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Points transactions - only admins can write, users can read their own
    match /points_transactions/{transactionId} {
      allow read: if request.auth != null &&
        resource.data.userId == request.auth.uid;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Game genres - public read for dropdowns and filters, admins can write
    match /game_genres/{genreId} {
      allow read: if true; // Allow public read access for dropdowns and filters
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Tournament brackets - authenticated users can read, admins can write
    match /tournament_brackets/{bracketId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User external profiles - users can read/write their own profiles
    match /user_external_profiles/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow reading for leaderboards and comparisons
    }
  }
}
